#Study of N random walks each with time step T
#Here we have fitted straight line to the log r and log t data generated by the simulation. r is the r.m.s value of random walks

import numpy as np
import numpy.random as rn
import matplotlib.pyplot as plt
import numpy.polynomial.polynomial as poly

N,T=1000,1000
t=range(1,T+1)
walks=2*rn.randint(2,size=(N,T))-1
positions=np.cumsum(walks,axis=1)

pos_sq=positions**2
mean_ps_sq=np.mean(pos_sq,axis=0)
rms=np.sqrt(mean_ps_sq)
t=np.log(t)
rms=np.log(rms)

coeffs=poly.polyfit(t,rms,1)
rmsfit=poly.polyval(t,coeffs)
print('The value of straight line constant after curve fitting is :',coeffs[0],'and value of the slope is :',coeffs[1])

plt.plot(t[::50],rms[::50],'o',color='orange',label='$log_{r.m.s}$value')
plt.plot(t,rmsfit,'b-',label='fitted data')
plt.xlabel('log(time)',fontsize=10)
plt.ylabel('log($R_{rms}$)',fontsize=10)
plt.suptitle('Study of r.m.s values w.r.t time steps of a large number of 1D random walks')
plt.title(r'$\log(r_{rms})=$%0.4f+%0.5f$\times\log t$'%(coeffs[0],coeffs[1]))
plt.legend()
plt.grid()
plt.show()
